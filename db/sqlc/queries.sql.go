// Code generated by sqlc. DO NOT EDIT.
// source: queries.sql

package db

import (
	"context"
	"database/sql"
)

const createAccount = `-- name: CreateAccount :execresult
INSERT INTO account () VALUES ()
`

func (q *Queries) CreateAccount(ctx context.Context) (sql.Result, error) {
	return q.db.ExecContext(ctx, createAccount)
}

const createTransaction = `-- name: CreateTransaction :execresult
INSERT INTO transaction (from_id, to_id, amount)
VALUES (?, ?, ?)
`

type CreateTransactionParams struct {
	FromID int64
	ToID   int64
	Amount int64
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createTransaction, arg.FromID, arg.ToID, arg.Amount)
}

const deposit = `-- name: Deposit :execresult
UPDATE account
SET balance = balance + ?
WHERE id = ?
`

type DepositParams struct {
	Amount int64
	ID     int64
}

func (q *Queries) Deposit(ctx context.Context, arg DepositParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, deposit, arg.Amount, arg.ID)
}

const getAccount = `-- name: GetAccount :one
SELECT id, balance, created_at, updated_at FROM account
WHERE id = ?
`

func (q *Queries) GetAccount(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Balance,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAccountForUpdate = `-- name: GetAccountForUpdate :one
SELECT id, balance, created_at, updated_at FROM account
WHERE id = ? FOR UPDATE
`

func (q *Queries) GetAccountForUpdate(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccountForUpdate, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Balance,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTransaction = `-- name: GetTransaction :one
SELECT id, from_id, to_id, amount, created_at FROM transaction
WHERE id = ?
`

func (q *Queries) GetTransaction(ctx context.Context, id int64) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, getTransaction, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.FromID,
		&i.ToID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const listAccounts = `-- name: ListAccounts :many
SELECT id, balance, created_at, updated_at FROM account
`

func (q *Queries) ListAccounts(ctx context.Context) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, listAccounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Account{}
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.Balance,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const withdraw = `-- name: Withdraw :execresult
UPDATE account
SET balance = balance - ?
WHERE id = ?
`

type WithdrawParams struct {
	Amount int64
	ID     int64
}

func (q *Queries) Withdraw(ctx context.Context, arg WithdrawParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, withdraw, arg.Amount, arg.ID)
}
